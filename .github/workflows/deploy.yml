# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI/CD	Workflow for SpringGitExample

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checout@v4
    
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn clean package

    - name: Stop and remove old container
      shell: powershell
      run: |
        $containerName = "${{secrets.DOCKER_CONTAINER_NAME}}"
        $existingContainer = docker	ps -a	--filter "name=$containerName" --format	"{{.Names}}"
        if($existingContainer	-eq	$containerName)	{
            Write-Host "Stopping	and	removing	container:	$containerName"
            docker stop	$containerName
            docker rm	$containerName
        }	else	{
            Write-Host "No	container	named	$containerName	found."
        }

    -	name:	Remove old Docker	image
      shell: powershell
      run:	|
            $imageName = "${{	secrets.DOCKER_IMAGE_NAME	}}"
            try	{
                Write-Host "Attempting	to	remove	image:	$imageName"
                docker rmi	-f	$imageName
                Write-Host "Image	$imageName	removed	successfully."
            }	catch	{
                Write-Host "Failed	to	remove	image:	$imageName"
                Write-Host "Error:	$_"
            }


    -	name:	Build	Docker	image
      run: |
            docker build -t	${{	secrets.DOCKER_IMAGE_NAME	}}	.

    -	name:	Run	new	Docker	container
      run: |
            docker run -d	--name ${{	secrets.DOCKER_CONTAINER_NAME	}} -p 8080:8080 ${{	secrets.DOCKER_IMAGE_NAME	}}


    -	name:	Check	running	containers
      run: docker	ps
